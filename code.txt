app.py
import os
import time
import streamlit as st
from audio_utils import prepare_audio
from openai_utils import transcribe_audio, analyze_categories
from config import get_config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
cfg = get_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞", 
    page_icon="üìã",
    layout="wide"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .stProgress > div > div > div > div {
        background-color: #1E90FF;
    }
    .category-box {
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }
    .decision-box {
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        font-weight: bold;
        font-size: 1.2rem;
        text-align: center;
    }
    .approved { background-color: #d4edda; color: #155724; border: 2px solid #c3e6cb; }
    .rejected { background-color: #f8d7da; color: #721c24; border: 2px solid #f5c6cb; }
    .rule-item {
        padding: 0.8rem;
        margin-bottom: 0.5rem;
        border-left: 4px solid #3498db;
        background: #f8f9fa;
        border-radius: 8px;
    }
    .detected-item {
        background: #fff3cd;
        padding: 0.8rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #ffc107;
    }
    .reason-box {
        background: #e2e3e5;
        padding: 1.2rem;
        border-radius: 8px;
        margin-top: 1rem;
    }
    .category-header {
        background: #6c757d;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        margin-top: 1.5rem;
    }
    .highlight {
        background-color: #fffacd;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üéôÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Üí üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Üí –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–∞")

# –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
with st.expander("üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—Ä–∞–∫–∞", expanded=True):
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–≤—Ç–æ–æ—Ç–∫–∞–∑)")
        st.markdown("""
        <div class="rule-item">
            <b>1. –ò–ø–æ—Ç–µ–∫–∞</b> ‚Üí –Ω–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ –∑–∞–ª–æ–≥–∏ ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        <div class="rule-item">
            <b>2. –ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç</b> ‚Üí –Ω–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ –∑–∞–ª–æ–≥–∏ ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        <div class="rule-item">
            <b>3. –í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥</b> ‚Üí —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ä–º—É–ª—É ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        <div class="rule-item">
            <b>4. –ù–µ –≤ –≥–æ—Ä–æ–¥–µ</b> ‚Üí —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        <div class="rule-item">
            <b>5. –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</b> ‚Üí –Ω–µ –ª–∏–¥ ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        <div class="rule-item">
            <b>6. –•–æ—Ç—è—Ç –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> ‚Üí –Ω–µ –ª–∏–¥ ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.subheader("–£—Å–ª–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        st.markdown("""
        <div class="rule-item">
            <b>1. –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏</b> ‚Üí 
            <ul>
                <li>–ù–µ–ª—å–∑—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –ª–∏–¥ ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span></li>
                <li>–°—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å</li>
                <li>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –∑–∞–ø–∏—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã ‚Üí <span class="highlight">–ü–ï–†–ï–î–ê–í–ê–¢–¨</span></li>
            </ul>
        </div>
        <div class="rule-item">
            <b>2. –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞</b> ‚Üí 
            <ul>
                <li>–°—á–∏—Ç–∞–µ—Ç, —á—Ç–æ >300 —Ç—ã—Å. —Ä—É–±. ‚Üí <span class="highlight">–ü–ï–†–ï–î–ê–í–ê–¢–¨</span></li>
                <li>–ù–µ —É–≤–µ—Ä–µ–Ω ‚Üí —É—Ç–æ—á–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å ‚Üí <span class="highlight">–û–¢–ö–ê–ó</span></li>
                <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –§–°–°–ü</li>
            </ul>
        </div>
        <div class="rule-item">
            <b>–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏</b> ‚Üí <span class="highlight">–ü–ï–†–ï–î–ê–í–ê–¢–¨</span>
        </div>
        """, unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
with st.container():
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ")
        uploaded = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", 
            type=["mp3", "wav"],
            accept_multiple_files=False,
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è MP3 –∏ WAV —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"
        )
        
        if uploaded:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded.name}")
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                st.session_state.process = True
        else:
            st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ mp3 –∏–ª–∏ wav —Ñ–∞–π–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
            st.session_state.clear()
    
    if uploaded and st.session_state.get("process"):
        progress_bar = st.progress(0, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ...")
        
        try:
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ
            time.sleep(0.5)
            progress_bar.progress(15, text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...")
            wav_file = prepare_audio(uploaded)
            
            # –®–∞–≥ 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            time.sleep(0.5)
            progress_bar.progress(35, text="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç 1-5 –º–∏–Ω—É—Ç)...")
            transcript = transcribe_audio(wav_file)
            st.session_state.transcript = transcript
            
            # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            time.sleep(0.5)
            progress_bar.progress(65, text="–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞...")
            analysis_result = analyze_categories(transcript)
            st.session_state.analysis = analysis_result
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            time.sleep(0.5)
            progress_bar.progress(100, text="–ì–æ—Ç–æ–≤–æ!")
            time.sleep(0.5)
            progress_bar.empty()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                os.remove(wav_file)
            except:
                pass
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.get("analysis"):
        with col2:
            st.subheader("2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            analysis = st.session_state.analysis
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            with st.expander("üìù –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", expanded=False):
                st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", 
                            st.session_state.transcript, 
                            height=200,
                            label_visibility="collapsed")
            
            # –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å–∏
            st.subheader("üìã –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å–∏", divider="blue")
            
            if analysis["decision"] == "–ü–ï–†–ï–î–ê–í–ê–¢–¨":
                decision_class = "approved"
                decision_icon = "‚úÖ"
            else:
                decision_class = "rejected"
                decision_icon = "‚ùå"
                
            st.markdown(
                f'<div class="decision-box {decision_class}">'
                f'{decision_icon} {analysis["decision"]}'
                f'</div>',
                unsafe_allow_html=True
            )
            
            # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è
            st.markdown(
                f'<div class="reason-box">'
                f'<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {analysis["reason"]}'
                f'</div>',
                unsafe_allow_html=True
            )
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if analysis["detected_categories"]:
                st.subheader("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞", divider="blue")
                
                for category in analysis["detected_categories"]:
                    status = "üü¢ –ü–ï–†–ï–î–ê–í–ê–¢–¨" if category["status"] == "approved" else "üî¥ –û–¢–ö–ê–ó"
                    st.markdown(
                        f'<div class="detected-item">'
                        f'<b>{category["name"]}</b> ‚Üí {status}<br>'
                        f'<i>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</i> {category["explanation"]}'
                        f'</div>',
                        unsafe_allow_html=True
                    )
            else:
                st.success("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è")
            
            # –°–µ–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", divider="gray")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            report = f"–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {uploaded.name}\n\n"
            report += f"–†–µ—à–µ–Ω–∏–µ: {analysis['decision']}\n"
            report += f"–ü—Ä–∏—á–∏–Ω–∞: {analysis['reason']}\n\n"
            
            if analysis["detected_categories"]:
                report += "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞:\n"
                for cat in analysis["detected_categories"]:
                    status = "–ü–ï–†–ï–î–ê–í–ê–¢–¨" if cat["status"] == "approved" else "–û–¢–ö–ê–ó"
                    report += f"- {cat['name']} ‚Üí {status}\n"
                    report += f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {cat['explanation']}\n\n"
            
            report += "\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n"
            report += st.session_state.transcript
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é",
                    data=st.session_state.transcript,
                    file_name="—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è_—Ä–∞–∑–≥–æ–≤–æ—Ä–∞.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            with col2:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç",
                    data=report,
                    file_name="–∞–Ω–∞–ª–∏–∑_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–±—Ä–∞–∫–∞.txt",
                    mime="text/plain",
                    use_container_width=True
                )
                


audio_utils.py
import os
import tempfile
from pydub import AudioSegment

ALLOWED_EXT = [".mp3", ".wav"]

def prepare_audio(uploaded_file) -> str:
    ext = os.path.splitext(uploaded_file.name)[1].lower()
    if ext not in ALLOWED_EXT:
        raise ValueError("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ mp3 –∏ wav")

    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(uploaded_file.getvalue())
        tmp_path = tmp.name

    if ext == ".mp3":
        wav_path = tmp_path.replace(".mp3", ".wav")
        AudioSegment.from_mp3(tmp_path).export(wav_path, format="wav")
        os.remove(tmp_path)
        return wav_path

    return tmp_path


config.py

import os
import streamlit as st
from dotenv import load_dotenv

load_dotenv()

class Config:
    def __init__(self):
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
        self.GPT_MODEL = "gpt-4.1-nano"
        self.TRANSCRIBE_MODEL = "whisper-1"
        self.TEMP_TRANSCRIBE = 0.2
        self.TEMP_SUMMARY = 0.5

@st.cache_resource
def get_config():
    if not os.getenv("OPENAI_API_KEY"):
        key = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ OpenAI API Key", type="password")
        if key:
            os.environ["OPENAI_API_KEY"] = key
            st.rerun()
    
    if not os.getenv("OPENAI_API_KEY"):
        st.error("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è OpenAI API Key! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        st.stop()
    
    return Config()


openai_utils.py

import json
import streamlit as st
from openai import OpenAI
from config import get_config

cfg = get_config()
client = OpenAI(api_key=cfg.OPENAI_API_KEY)

def transcribe_audio(wav_path: str) -> str:
    st.info("üîç –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API‚Ä¶")
    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model=cfg.TRANSCRIBE_MODEL, 
                file=audio_file,
                temperature=cfg.TEMP_TRANSCRIBE,
                response_format="text"
            )
        st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞.")
        return transcript
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        st.stop()

def analyze_categories(transcript: str) -> dict:
    st.info("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞‚Ä¶")
    
    system_prompt = """
    –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ. 
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞. 
    –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞:

    ### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–≤—Ç–æ–æ—Ç–∫–∞–∑):
    1. –ò–ø–æ—Ç–µ–∫–∞ ‚Üí –û–¢–ö–ê–ó
    2. –ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç ‚Üí –û–¢–ö–ê–ó
    3. –í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ ‚Üí –û–¢–ö–ê–ó
    4. –ù–µ –≤ –≥–æ—Ä–æ–¥–µ ‚Üí –û–¢–ö–ê–ó
    5. –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Üí –û–¢–ö–ê–ó
    6. –•–æ—Ç—è—Ç –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Üí –û–¢–ö–ê–ó

    ### –£—Å–ª–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
    7. –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ‚Üí –û–¢–ö–ê–ó (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã ‚Üí –ü–ï–†–ï–î–ê–í–ê–¢–¨)
    8. –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞:
       - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ >300 —Ç—ã—Å. —Ä—É–±. ‚Üí –ü–ï–†–ï–î–ê–í–ê–¢–¨
       - –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Å—É–º–º–µ ‚Üí –û–¢–ö–ê–ó

    ### –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:
    - –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –æ–±—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ "–ù–ï –ü–ï–†–ï–î–ê–í–ê–¢–¨"
    - –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏" –±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã ‚Üí "–ù–ï –ü–ï–†–ï–î–ê–í–ê–¢–¨"
    - –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ "–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞" –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã >300—Ç—Ä ‚Üí "–ù–ï –ü–ï–†–ï–î–ê–í–ê–¢–¨"
    - –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Üí "–ü–ï–†–ï–î–ê–í–ê–¢–¨"
    - –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ "–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞" —Å —Å—É–º–º–æ–π >300—Ç—Ä ‚Üí "–ü–ï–†–ï–î–ê–í–ê–¢–¨"
    - –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏" —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã ‚Üí "–ü–ï–†–ï–î–ê–í–ê–¢–¨"

    ### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):
    {
      "decision": "–ü–ï–†–ï–î–ê–í–ê–¢–¨ –∏–ª–∏ –ù–ï –ü–ï–†–ï–î–ê–í–ê–¢–¨",
      "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
      "detected_categories": [
        {
          "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
          "status": "approved –∏–ª–∏ rejected",
          "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
        },
        ...
      ]
    }
    """
    
    user_prompt = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{transcript}"
    
    try:
        response = client.chat.completions.create(
            model=cfg.GPT_MODEL,
            response_format={"type": "json_object"},
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=cfg.TEMP_SUMMARY,
            max_tokens=2000
        )
        
        result_json = response.choices[0].message.content
        analysis = json.loads(result_json)
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return analysis
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        st.stop()
        
        