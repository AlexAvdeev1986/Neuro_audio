

app.py
import os
import time
import streamlit as st
from audio_utils import prepare_audio
from openai_utils import transcribe_audio, generate_document
from config import get_config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
cfg = get_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞", 
    page_icon="üìã",
    layout="wide"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .stProgress > div > div > div > div {
        background-color: #1E90FF;
    }
    .category-box {
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }
    .new-category { border-left: 5px solid #FF4B4B; background-color: #fff0f0; }
    .existing-category { border-left: 5px solid #0F9D58; background-color: #f0fff0; }
    .keep-category { border-left: 5px solid #4285F4; background-color: #f0f8ff; }
    .download-section {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin-top: 1rem;
    }
    .result-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }
    .section-title {
        color: #2c3e50;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }
    .rule-item {
        padding: 0.5rem 1rem;
        margin-bottom: 0.5rem;
        border-left: 3px solid #3498db;
        background: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üéôÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Üí üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Üí –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

# –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
with st.expander("üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—Ä–∞–∫–∞", expanded=True):
    st.subheader("–ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å 12.06)")
    st.markdown("""
    <div class="rule-item">1. <span class="highlight">–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏</span> ‚Üí –°—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å</div>
    <div class="rule-item">2. <span class="highlight">–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞</span> ‚Üí 
        <ul>
            <li>–ï—Å–ª–∏ >300 —Ç—ã—Å. —Ä—É–±. ‚Üí –ø–µ—Ä–µ–¥–∞–µ–º</li>
            <li>–ï—Å–ª–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω ‚Üí —É—Ç–æ—á–Ω—è–µ–º –∏ –ø–µ—Ä–µ–∑–≤–∞–Ω–∏–≤–∞–µ–º</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞ (—Å 09.06)")
    st.markdown("""
    <div class="rule-item">1. <span class="highlight">–ò–ø–æ—Ç–µ–∫–∞</span> ‚Üí –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º (–Ω–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)</div>
    <div class="rule-item">2. <span class="highlight">–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç</span> ‚Üí –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º (–Ω–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)</div>
    <div class="rule-item">3. <span class="highlight">–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥</span> ‚Üí —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ä–º—É–ª—É</div>
    <div class="rule-item">4. <span class="highlight">–ù–µ –≤ –≥–æ—Ä–æ–¥–µ</span> ‚Üí —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω</div>
    <div class="rule-item">5. <span class="highlight">–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</span> ‚Üí –Ω–µ –ª–∏–¥</div>
    <div class="rule-item">6. <span class="highlight">–•–æ—Ç—è—Ç –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ</span> ‚Üí –Ω–µ –ª–∏–¥</div>
    """, unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
with st.container():
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ")
        uploaded = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", 
            type=["mp3", "wav"],
            accept_multiple_files=False,
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è MP3 –∏ WAV —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"
        )
        
        if uploaded:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded.name}")
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                st.session_state.process = True
        else:
            st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ mp3 –∏–ª–∏ wav —Ñ–∞–π–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
            st.session_state.clear()
    
    if uploaded and st.session_state.get("process"):
        progress_bar = st.progress(0, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ...")
        
        try:
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ
            time.sleep(0.5)
            progress_bar.progress(15, text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...")
            wav_file = prepare_audio(uploaded)
            
            # –®–∞–≥ 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            time.sleep(0.5)
            progress_bar.progress(35, text="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç 1-5 –º–∏–Ω—É—Ç)...")
            transcript = transcribe_audio(wav_file)
            st.session_state.transcript = transcript
            
            # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            time.sleep(0.5)
            progress_bar.progress(65, text="–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞...")
            document = generate_document(transcript)
            st.session_state.document = document
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            time.sleep(0.5)
            progress_bar.progress(100, text="–ì–æ—Ç–æ–≤–æ!")
            time.sleep(0.5)
            progress_bar.empty()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                os.remove(wav_file)
            except:
                pass
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.get("document"):
        with col2:
            st.subheader("2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            with st.expander("üìù –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", expanded=True):
                st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", 
                            st.session_state.transcript, 
                            height=300,
                            label_visibility="collapsed")
            
            # –î–æ–∫—É–º–µ–Ω—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            st.subheader("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞", divider="blue")
            document = st.session_state.document
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            sections = {
                "–ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": "new-category",
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞": "existing-category",
                "–û—Å—Ç–∞–≤–ª—è–µ–º": "keep-category"
            }
            
            for section, css_class in sections.items():
                start_idx = document.find(f"### {section}")
                if start_idx >= 0:
                    end_idx = document.find("###", start_idx + 1)
                    content = document[start_idx:end_idx].strip() if end_idx != -1 else document[start_idx:]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫
                    if ":" in content:
                        content = content.split(":", 1)[1].strip()
                    
                    with st.container():
                        st.markdown(f'<div class="category-box {css_class}">'
                                   f'<h3>{section}</h3>'
                                   f'<div style="margin-top:0.5rem">{content}</div>'
                                   f'</div>', 
                                   unsafe_allow_html=True)
            
            # –°–µ–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", divider="gray")
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é",
                    data=st.session_state.transcript,
                    file_name="—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è_—Ä–∞–∑–≥–æ–≤–æ—Ä–∞.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            with col2:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
                    data=st.session_state.document,
                    file_name="–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–±—Ä–∞–∫–∞.txt",
                    mime="text/plain",
                    use_container_width=True
                )
                

audio_utils.py

import os
import tempfile
from pydub import AudioSegment
import streamlit as st

ALLOWED_EXT = [".mp3", ".wav"]

def prepare_audio(uploaded_file) -> str:
    ext = os.path.splitext(uploaded_file.name)[1].lower()
    if ext not in ALLOWED_EXT:
        raise ValueError("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ mp3 –∏ wav")

    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(uploaded_file.getvalue())
        tmp_path = tmp.name

    if ext == ".mp3":
        wav_path = tmp_path.replace(".mp3", ".wav")
        AudioSegment.from_mp3(tmp_path).export(wav_path, format="wav")
        os.remove(tmp_path)
        return wav_path

    return tmp_path

config.py

import os
import streamlit as st
from dotenv import load_dotenv

load_dotenv()

class Config:
    def __init__(self):
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
        self.GPT_MODEL = "gpt-4.1-nano"
        self.TRANSCRIBE_MODEL = "whisper-1"
        self.TEMP_TRANSCRIBE = 0.2
        self.TEMP_SUMMARY = 0.5

@st.cache_resource
def get_config():
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω –≤ .env, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
    if not os.getenv("OPENAI_API_KEY"):
        key = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ OpenAI API Key", type="password")
        if key:
            os.environ["OPENAI_API_KEY"] = key
            st.rerun()
    
    if not os.getenv("OPENAI_API_KEY"):
        st.error("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è OpenAI API Key! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        st.stop()
    
    return Config()

openai_utils.py

import streamlit as st
from openai import OpenAI
from config import get_config

cfg = get_config()
client = OpenAI(api_key=cfg.OPENAI_API_KEY)

def transcribe_audio(wav_path: str) -> str:
    st.info("üîç –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API‚Ä¶")
    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model=cfg.TRANSCRIBE_MODEL, 
                file=audio_file,
                temperature=cfg.TEMP_TRANSCRIBE,
                response_format="text"
            )
        st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞.")
        return transcript
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        st.stop()

def generate_document(transcript: str) -> str:
    st.info("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞‚Ä¶")
    prompt = (
        "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ. "
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n\n"
        
        "### –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å 12.06):\n"
        "1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç '–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏' –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ ‚Üí '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏': —Å—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å\n"
        "2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ—É–≤–µ—Ä–µ–Ω –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞ ‚Üí '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞': "
        "–µ—Å–ª–∏ —Å—É–º–º–∞ >300 —Ç—ã—Å. —Ä—É–±. - –ø–µ—Ä–µ–¥–∞–µ–º, –∏–Ω–∞—á–µ —É—Ç–æ—á–Ω—è–µ–º\n\n"
        
        "### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞ (—Å 09.06):\n"
        "1. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∏–ø–æ—Ç–µ–∫–∞ ‚Üí '–ò–ø–æ—Ç–µ–∫–∞': –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º\n"
        "2. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç ‚Üí '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç': –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º\n"
        "3. –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ ‚Üí '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥': —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ä–º—É–ª—É\n"
        "4. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ –≥–æ—Ä–æ–¥–µ ‚Üí '–ù–µ –≤ –≥–æ—Ä–æ–¥–µ': —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω\n"
        "5. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è ‚Üí '–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ': –Ω–µ –ª–∏–¥\n"
        "6. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Üí '–•–æ—Ç—è—Ç –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ': –Ω–µ –ª–∏–¥\n\n"
        
        "### –û—Å—Ç–∞–≤–ª—è–µ–º (–ø–µ—Ä–µ–¥–∞–µ–º):\n"
        "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞\n\n"
        
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "### –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 12.06:\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        "### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 09.06:\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        "### –û—Å—Ç–∞–≤–ª—è–µ–º (–ø–µ—Ä–µ–¥–∞–µ–º):\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{transcript}\n\n"
        "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π!"
    )
    
    try:
        response = client.chat.completions.create(
            model=cfg.GPT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ"},
                {"role": "user", "content": prompt}
            ],
            temperature=cfg.TEMP_SUMMARY,
            max_tokens=1000
        )
        doc = response.choices[0].message.content
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return doc.strip()
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        st.stop()
        