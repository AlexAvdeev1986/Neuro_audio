# openai_utils.py
import openai
import streamlit as st
from config import get_config

cfg = get_config()
openai.api_key = cfg.OPENAI_API_KEY

def transcribe_audio(wav_path: str) -> str:
    st.info("üîç –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API‚Ä¶")
    with open(wav_path, "rb") as f:
        resp = openai.Audio.transcribe(
            model=cfg.TRANSCRIBE_MODEL, file=f, temperature=cfg.TEMP_TRANSCRIBE
        )
    text = resp.get("text", "")
    st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞.")
    return text

def generate_document(transcript: str) -> str:
    st.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞‚Ä¶")
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "1) –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 12.06:\n<—Å–ø–∏—Å–æ–∫>\n\n"
        "2) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 09.06:\n<—Å–ø–∏—Å–æ–∫>\n\n"
        "3) –û—Å—Ç–∞–≤–ª—è–µ–º:\n<—Å–ø–∏—Å–æ–∫>\n\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcript}\n"
        "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )
    resp = openai.ChatCompletion.create(
        model=cfg.GPT_MODEL,
        messages=[
            {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."},
            {"role": "user", "content": prompt}
        ],
        temperature=cfg.TEMP_SUMMARY
    )
    doc = resp.choices[0].message.content.strip()
    st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    return doc
