import streamlit as st
from openai import OpenAI
from config import get_config

cfg = get_config()
client = OpenAI(api_key=cfg.OPENAI_API_KEY)

def transcribe_audio(wav_path: str) -> str:
    st.info("üîç –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API‚Ä¶")
    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model=cfg.TRANSCRIBE_MODEL, 
                file=audio_file,
                temperature=cfg.TEMP_TRANSCRIBE,
                response_format="text"
            )
        st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞.")
        return transcript
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        st.stop()

def generate_document(transcript: str) -> str:
    st.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–∞–∫–∞‚Ä¶")
    prompt = (
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n\n"
        
        "### –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 12.06:\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        
        "### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞–∫–∞, –ù–ï –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–µ —Å –ö–¶ —Å 09.06:\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        
        "### –û—Å—Ç–∞–≤–ª—è–µ–º:\n"
        "<—Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π>\n\n"
        
        "–ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
        "- '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏' ‚Üí —Å—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å\n"
        "- '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—É–º–º–µ –¥–æ–ª–≥–∞' ‚Üí —É—Ç–æ—á–Ω—è–µ–º —Å—É–º–º—É\n"
        "- –ò–ø–æ—Ç–µ–∫–∞/–∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç ‚Üí –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º\n"
        "- –í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ ‚Üí —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ä–º—É–ª—É\n"
        "- '–ù–µ –≤ –≥–æ—Ä–æ–¥–µ' ‚Üí —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω\n"
        "- '–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ' ‚Üí –Ω–µ –ª–∏–¥\n\n"
        
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcript}\n\n"
        "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π!"
    )
    
    try:
        response = client.chat.completions.create(
            model=cfg.GPT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—Ä–∞–∫–∞ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ"},
                {"role": "user", "content": prompt}
            ],
            temperature=cfg.TEMP_SUMMARY,
            max_tokens=1000
        )
        doc = response.choices[0].message.content
        st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return doc.strip()
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        st.stop()
        